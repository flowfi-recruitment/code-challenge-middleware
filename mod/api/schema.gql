schema {
  query: Query
}

type Query {
  getTransactions(query: TransactionsQuery): [Transaction]
  getCategory(id: number): Category
  getMerchant(id: number): Merchant
  getMerchantTransactions(query: TransactionsQuery): [MerchantTransactions]
}

type Merchant {
  id: ID!
  name: String!
  logo: String!
}

input MerchantInput {
  id: ID!
  name: String!
  logo: String!
}

type Mutation {
  createMerchant(merchant: MerchantInput!): Merchant!
}

enum CATEGORIES {
  MISCELLANEOUS
  FOOD
  TRAVEL
  ENTERTAINMENT
  OFFICE
  WAGES
  REVENUE
}

type TransactionsQuery {
  range: DateRange
  merchantId: Int
  amount: Int
}

type DateRange {
  start: String
  end: String
}

type Transaction {
  id: ID
  memo: String
  date: String
  amount: Int
  merchant: Merchant
  category: Category
}

type Merchant {
  id: ID
  name: String
  logo: String
}

type Category {
  id: ID
  name: CATEGORIES
}

type MerchantTransactions {
  total: Int
  transactions: [Transaction]
}
